---
// Import the global styles to make sure Tailwind is loaded
import '../styles/global.css';
import { SPECIES } from '../lib/species';
import SpeciesCard from '../components/SpeciesCard.astro';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Nature Brawl</title>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

      /* 8-bit Pokemon style */
      .pokemon-container {
        font-family: 'Press Start 2P', monospace;
        font-size: 12px;
        line-height: 1.6;
        image-rendering: pixelated;
        image-rendering: -moz-crisp-edges;
        image-rendering: crisp-edges;
      }

      .pokemon-border {
        border: 4px solid #000;
        border-image: repeating-linear-gradient(
            0deg,
            #000 0px,
            #000 4px,
            transparent 4px,
            transparent 8px
          )
          4;
        background: linear-gradient(135deg, #f8f8f8 0%, #e8e8e8 100%);
        box-shadow:
          inset -2px -2px 0px #c0c0c0,
          inset 2px 2px 0px #ffffff,
          4px 4px 0px #808080;
      }

      .pokemon-window {
        background: #f8f8f8;
        border: 2px solid #000;
        border-image: repeating-linear-gradient(
            0deg,
            #000 0px,
            #000 2px,
            transparent 2px,
            transparent 4px
          )
          2;
        box-shadow:
          inset -1px -1px 0px #c0c0c0,
          inset 1px 1px 0px #ffffff;
      }

      /* Main menu styling */
      .menu-button {
        background: linear-gradient(145deg, #f0f0f0, #e0e0e0);
        border: 2px solid #000;
        font-family: 'Press Start 2P', monospace;
        font-size: 11px;
        padding: 16px 24px;
        cursor: pointer;
        transition: all 0.15s ease;
        box-shadow:
          inset -2px -2px 0px #c0c0c0,
          inset 2px 2px 0px #ffffff,
          2px 2px 0px #808080;
        position: relative;
        overflow: hidden;
      }

      .menu-button:hover:not(:disabled) {
        background: linear-gradient(145deg, #e8e8e8, #d8d8d8);
        transform: translate(1px, 1px);
        box-shadow:
          inset -1px -1px 0px #a0a0a0,
          inset 1px 1px 0px #ffffff,
          1px 1px 0px #808080;
      }

      .menu-button:active:not(:disabled) {
        background: linear-gradient(145deg, #d0d0d0, #c8c8c8);
        transform: translate(2px, 2px);
        box-shadow:
          inset -1px -1px 0px #808080,
          inset 1px 1px 0px #f0f0f0;
      }

      .menu-button:disabled {
        background: #c0c0c0;
        color: #808080;
        cursor: not-allowed;
        opacity: 0.6;
      }

      .menu-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.4),
          transparent
        );
        transition: left 0.5s;
      }

      .menu-button:hover:not(:disabled)::before {
        left: 100%;
      }

      /* Title screen styling */
      .title-screen {
        background: linear-gradient(
          135deg,
          #4a90e2 0%,
          #357abd 50%,
          #1e5f99 100%
        );
        min-height: 100vh;
        position: relative;
      }

      .title-screen::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background:
          radial-gradient(
            circle at 20% 30%,
            rgba(255, 255, 255, 0.1) 0%,
            transparent 50%
          ),
          radial-gradient(
            circle at 80% 70%,
            rgba(255, 255, 255, 0.05) 0%,
            transparent 50%
          );
      }

      .title-logo {
        text-shadow:
          2px 2px 0px #000,
          -2px -2px 0px #000,
          2px -2px 0px #000,
          -2px 2px 0px #000,
          4px 4px 8px rgba(0, 0, 0, 0.5);
        animation: titlePulse 3s ease-in-out infinite;
      }

      @keyframes titlePulse {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.02);
        }
      }

      /* Character selection styling */
      .character-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
      }

      /* Pixel perfect scaling */
      .pixel-perfect {
        image-rendering: pixelated;
        image-rendering: -moz-crisp-edges;
        image-rendering: crisp-edges;
      }

      /* Battle history styling */
      .history-item {
        background: #f8f8f8;
        border: 2px solid #000;
        padding: 12px;
        margin: 8px 0;
        cursor: pointer;
        transition: all 0.15s ease;
        box-shadow:
          inset -1px -1px 0px #c0c0c0,
          inset 1px 1px 0px #ffffff;
      }

      .history-item:hover {
        background: #e8e8e8;
        transform: translate(1px, 1px);
      }
    </style>
  </head>
  <body class="title-screen pokemon-container">
    <div class="relative z-10">
      <div class="container mx-auto px-4 py-8">
        <!-- Title Screen -->
        <div class="text-center mb-12">
          <h1 class="title-logo text-6xl font-bold text-white mb-8">
            üåø NATURE BRAWL ü•ä
          </h1>
          <div class="pokemon-window p-6 max-w-2xl mx-auto mb-8">
            <p class="text-xs text-black">
              Choose your wild fighter and challenge your friends to an epic
              battle of nature's fiercest creatures!
            </p>
          </div>
        </div>

        <!-- Main Menu -->
        <div class="max-w-4xl mx-auto">
          <div class="pokemon-border p-8">
            <!-- Character Selection -->
            <div class="pokemon-window p-6 mb-6">
              <h2 class="text-lg font-bold text-black text-center mb-6">
                CHOOSE YOUR FIGHTER
              </h2>

              <div class="character-grid mb-6">
                {SPECIES.map((species) => <SpeciesCard species={species} />)}
              </div>

              <div class="text-center">
                <button
                  id="create-challenge-btn"
                  class="menu-button disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled
                >
                  üéØ CREATE CHALLENGE
                </button>
                <p class="text-xs text-black mt-4">
                  Select a fighter to create your challenge
                </p>
              </div>
            </div>

            <!-- Battle History -->
            <div
              class="pokemon-window p-6"
              id="battle-history"
              style="display: none;"
            >
              <h3 class="text-sm font-bold text-black mb-4">RECENT BATTLES</h3>
              <div id="history-list" class="space-y-2">
                <!-- History items will be populated by JavaScript -->
              </div>
            </div>

            <!-- Menu Options -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
              <button id="show-history-btn" class="menu-button">
                üìú BATTLE HISTORY
              </button>
              <button id="show-rules-btn" class="menu-button">
                üìñ HOW TO PLAY
              </button>
            </div>

            <!-- Rules Modal (Hidden by default) -->
            <div
              id="rules-modal"
              class="pokemon-window p-6 mt-6"
              style="display: none;"
            >
              <h3 class="text-sm font-bold text-black mb-4">HOW TO PLAY</h3>
              <div class="text-xs text-black space-y-2">
                <p>‚Ä¢ Choose your fighter and create a challenge</p>
                <p>‚Ä¢ Share the link with a friend to accept your challenge</p>
                <p>‚Ä¢ Take turns selecting attacks to defeat your opponent</p>
                <p>‚Ä¢ Each attack costs energy - manage it wisely!</p>
                <p>‚Ä¢ First to reduce opponent's health to 0 wins!</p>
                <p>‚Ä¢ Watch epic AI-generated battle scenes unfold!</p>
              </div>
              <div class="text-center mt-4">
                <button id="close-rules-btn" class="menu-button">
                  ‚úñ CLOSE
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      let selectedSpecies: string | null = null;

      // Handle character selection
      const cards = document.querySelectorAll('.character-card');
      const createBtn = document.getElementById(
        'create-challenge-btn'
      ) as HTMLButtonElement;

      cards.forEach((card) => {
        card.addEventListener('click', () => {
          // Remove selection from all cards
          cards.forEach((c) =>
            c.classList.remove('ring-4', 'ring-white', 'ring-opacity-80')
          );

          // Add selection to clicked card
          card.classList.add('ring-4', 'ring-white', 'ring-opacity-80');

          // Store selected species
          selectedSpecies = card.getAttribute('data-species');

          // Enable create button
          createBtn.disabled = false;
        });
      });

      // Handle challenge creation
      createBtn.addEventListener('click', async () => {
        if (!selectedSpecies) return;

        createBtn.disabled = true;
        createBtn.textContent = '‚è≥ CREATING...';

        try {
          // Get or create browser ID
          let browserId = localStorage.getItem('naturebrawl.browserId');
          if (!browserId) {
            browserId = crypto.randomUUID();
            localStorage.setItem('naturebrawl.browserId', browserId);
          }

          const response = await fetch('/api/brawls/create', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              species: selectedSpecies,
              browserId: browserId,
            }),
          });

          if (response.ok) {
            const { slug } = await response.json();

            // Store fight history
            const history = JSON.parse(
              localStorage.getItem('naturebrawl.history') || '[]'
            );
            history.unshift(slug);
            localStorage.setItem(
              'naturebrawl.history',
              JSON.stringify(history.slice(0, 10))
            );

            // Redirect to the challenge page
            window.location.href = `/fight/${slug}`;
          } else {
            throw new Error('Failed to create challenge');
          }
        } catch (error) {
          console.error('Error creating challenge:', error);
          alert('Failed to create challenge. Please try again.');
          createBtn.disabled = false;
          createBtn.textContent = 'üéØ CREATE CHALLENGE';
        }
      });

      // Handle menu buttons
      const showHistoryBtn = document.getElementById('show-history-btn');
      const showRulesBtn = document.getElementById('show-rules-btn');
      const closeRulesBtn = document.getElementById('close-rules-btn');
      const battleHistoryDiv = document.getElementById('battle-history');
      const rulesModal = document.getElementById('rules-modal');
      const historyList = document.getElementById('history-list');

      // Show/hide battle history
      showHistoryBtn?.addEventListener('click', () => {
        if (battleHistoryDiv) {
          const isVisible = battleHistoryDiv.style.display !== 'none';
          battleHistoryDiv.style.display = isVisible ? 'none' : 'block';
          showHistoryBtn.textContent = isVisible
            ? 'üìú BATTLE HISTORY'
            : 'üìú HIDE HISTORY';

          if (!isVisible) {
            loadBattleHistory();
          }
        }
      });

      // Show/hide rules
      showRulesBtn?.addEventListener('click', () => {
        if (rulesModal) {
          const isVisible = rulesModal.style.display !== 'none';
          rulesModal.style.display = isVisible ? 'none' : 'block';
          showRulesBtn.textContent = isVisible
            ? 'üìñ HOW TO PLAY'
            : 'üìñ HIDE RULES';
        }
      });

      closeRulesBtn?.addEventListener('click', () => {
        if (rulesModal && showRulesBtn) {
          rulesModal.style.display = 'none';
          showRulesBtn.textContent = 'üìñ HOW TO PLAY';
        }
      });

      // Load battle history from localStorage
      function loadBattleHistory() {
        if (!historyList) return;

        const history = JSON.parse(
          localStorage.getItem('naturebrawl.history') || '[]'
        );

        if (history.length === 0) {
          historyList.innerHTML =
            '<p class="text-xs text-gray-600">No battles yet. Create your first challenge!</p>';
          return;
        }

        historyList.innerHTML = history
          .map(
            (slug: string) => `
          <div class="history-item" onclick="window.location.href='/fight/${slug}'">
            <div class="flex justify-between items-center">
              <span class="text-xs font-bold">Battle: ${slug.toUpperCase()}</span>
              <span class="text-xs">‚û§</span>
            </div>
          </div>
        `
          )
          .join('');
      }

      // Load history on page load if localStorage has battles
      document.addEventListener('DOMContentLoaded', () => {
        const history = JSON.parse(
          localStorage.getItem('naturebrawl.history') || '[]'
        );
        if (history.length > 0 && showHistoryBtn) {
          showHistoryBtn.style.opacity = '1';
        }
      });
    </script>
  </body>
</html>
